DROP DATABASE IF EXISTS stockManagement;

-- Create the database
CREATE DATABASE IF NOT EXISTS stockManagement;
USE stockManagement;

-- Drop existing tables to avoid conflicts
DROP TABLE IF EXISTS stockTransactions;
DROP TABLE IF EXISTS purchases;
DROP TABLE IF EXISTS stocks;
DROP TABLE IF EXISTS suppliers;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS purchaseOrders;
DROP TABLE IF EXISTS purchaseOrderItems;
DROP TABLE IF EXISTS requisitionForm;

-- Create Users Table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    department VARCHAR(255) NOT NULL
);

-- Insert sample users
INSERT INTO users (username, password, department) VALUES
('stockUser', '123', 'stockManager'),
('proUser', '123', 'procurement'),
('salesUser', '123', 'sales');

-- Create Suppliers Table
CREATE TABLE suppliers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    contact VARCHAR(255),
    email VARCHAR(255)
);

-- Create Stocks Table
CREATE TABLE stocks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    itemName VARCHAR(255) NOT NULL,
    brand VARCHAR(255),
    quantity INT NOT NULL, -- Consider using INT instead of BIGINT if quantities are not extremely large
    unit VARCHAR(50),
    cost DECIMAL(18, 2),
    serialNo VARCHAR(255),
    quality VARCHAR(50),
    supplierId INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (supplierId) REFERENCES suppliers(id)
);

-- Create Stock Transactions Table
CREATE TABLE stockTransactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    itemId INT,
    transactionType ENUM('add', 'remove') NOT NULL,
    quantity INT NOT NULL,
    date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (itemId) REFERENCES stocks(id)
);

-- Create Purchases Table
CREATE TABLE purchases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    itemId INT,
    supplierId INT,
    quantity INT NOT NULL,
    purchaseDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (itemId) REFERENCES stocks(id),
    FOREIGN KEY (supplierId) REFERENCES suppliers(id)
);

-- Create Purchase Orders Table
CREATE TABLE purchaseOrders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client VARCHAR(255) NOT NULL, -- Name or ID of the client
    userId INT NOT NULL, -- ID of the user creating the order
    status ENUM('pending', 'completed', 'rejected') DEFAULT 'pending',
    submissionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tax DECIMAL(18, 2) DEFAULT 0, -- Tax amount
    shipping DECIMAL(18, 2) DEFAULT 0, -- Shipping cost
    other DECIMAL(18, 2) DEFAULT 0, -- Additional charges
    subtotal DECIMAL(18, 2) NOT NULL,
    total DECIMAL(18, 2) NOT NULL,
    FOREIGN KEY (userId) REFERENCES users(id)
);

-- Table to store individual items within each purchase order
CREATE TABLE purchaseOrderItems (
    id INT AUTO_INCREMENT PRIMARY KEY,
    purchaseOrderId INT NOT NULL, -- Foreign key to link to purchaseOrders
    itemName VARCHAR(255) NOT NULL,
    quantity INT NOT NULL, -- Consider using INT instead of BIGINT for item quantities
    unitPrice DECIMAL(18, 2) NOT NULL,
    totalPrice DECIMAL(18, 2) NOT NULL,
    FOREIGN KEY (purchaseOrderId) REFERENCES purchaseOrders(id)
);

-- Requisition Form Table
CREATE TABLE requisitionForm (
    id INT AUTO_INCREMENT PRIMARY KEY,
    projectName VARCHAR(255) NOT NULL,
    clientName VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    description TEXT,
    status ENUM('pending', 'completed', 'rejected') DEFAULT 'pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


-- Select all data from the stocks table for verification
SELECT * FROM stocks;
SELECT * FROM purchaseOrders;
SELECT * FROM requisitionForm;


